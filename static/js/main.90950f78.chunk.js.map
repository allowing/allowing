{"version":3,"sources":["component/Home.js","store/TodoStore.js","component/Todo.js","component/About.js","component/App.js","serviceWorker.js","index.js"],"names":["Home","observer","react_default","a","createElement","Fragment","Component","TodoStore","action","bound","_this","this","axios","get","then","_ref","data","models","model","push","filter","item","id","observable","Todo","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","store","add","Math","random","title","delete","index","_this2","map","key","onClick","About","App","BrowserRouter","className","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wTAG+BA,EAAfC,+LAER,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,gCAHgCC,iECAvBC,KAGhBC,IAAOC,QAIPD,IAAOC,QAIPD,IAAOC,0IARc,IAAAC,EAAAC,KAClBC,IAAMC,IAAI,cAAcC,KAAK,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAAcN,EAAKO,OAASD,gCAG3CE,GACdP,KAAKM,OAAOE,KAAKD,kCAGAA,GACjBP,KAAKM,OAASN,KAAKM,OAAOG,OAAO,SAACC,GAAD,OAAUA,EAAKC,KAAOJ,EAAMI,kDAXhEC,6EAAoB,yTCAMC,EAAfvB,0BAGZ,SAAAuB,EAAYC,GAAO,IAAAf,EAAA,OAAAgB,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACfd,EAAAgB,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMc,KAHVM,MAAQ,IAAIxB,EAEOG,EAMnBsB,IAAM,WACFtB,EAAKqB,MAAMC,IAAI,CACXV,GAAIW,KAAKC,SACTC,MAAOF,KAAKC,YATDxB,EAanB0B,OAAS,SAAClB,GACNR,EAAKqB,MAAMK,OAAOlB,IAXlBR,EAAKqB,MAAMM,QAHI3B,wEAiBV,IAAA4B,EAAA3B,KACL,OACIT,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,UACKO,KAAKoB,MAAMd,OAAOsB,IAAI,SAACrB,GAAD,OAAWhB,EAAAC,EAAAC,cAAA,MAAIoC,IAAKtB,EAAMI,GAAImB,QAAS,kBAAMH,EAAKF,OAAOlB,KAASA,EAAMiB,UAEnGjC,EAAAC,EAAAC,cAAA,UAAQqC,QAAS9B,KAAKqB,KAAtB,wBA1B4B1B,iBCDboC,EAAfzC,+LAER,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,qBAHiCC,iBCIxBqC,mLAEb,OACIzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,KACI1C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,OAAKyC,UAAU,OACX3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMC,GAAG,KAAT,QACA7C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMC,GAAG,SAAT,QACA7C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMC,GAAG,UAAT,iBAGJ7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IACjCE,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAW3B,IAC/BtB,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWT,aAbnBpC,aCGb8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.90950f78.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nexport default @observer class Home extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                asdfasdfasdfffsd\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import { observable, action } from 'mobx';\r\nimport axios from 'axios';\r\n\r\nexport default class TodoStore {\r\n    @observable models = [];\r\n\r\n    @action.bound index() {\r\n        axios.get('/todo.json').then(({ data }) => this.models = data);\r\n    }\r\n\r\n    @action.bound add(model) {\r\n        this.models.push(model);\r\n    }\r\n\r\n    @action.bound delete(model) {\r\n        this.models = this.models.filter((item) => item.id !== model.id);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport TodoStore from '../store/TodoStore';\r\n\r\nexport default @observer class Todo extends Component {\r\n    store = new TodoStore();\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.store.index();\r\n    }\r\n\r\n    add = () => {\r\n        this.store.add({\r\n            id: Math.random(),\r\n            title: Math.random(),\r\n        });\r\n    };\r\n\r\n    delete = (model) => {\r\n        this.store.delete(model);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ul>\r\n                    {this.store.models.map((model) => <li key={model.id} onClick={() => this.delete(model)}>{model.title}</li>)}\r\n                </ul>\r\n                <button onClick={this.add}>添加</button>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nexport default @observer class About extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                About\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport Home from './Home';\nimport Todo from './Todo';\nimport About from './About';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <Router>\n                <>\n                    <div className=\"App\">\n                        <Link to=\"/\">Home</Link>\n                        <Link to=\"/todo\">Todo</Link>\n                        <Link to=\"/about\">关于</Link>\n                    </div>\n\n                    <Route exact path=\"/\" component={Home} />\n                    <Route path=\"/todo\" component={Todo} />\n                    <Route path=\"/about\" component={About} />\n                </>\n            </Router>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}